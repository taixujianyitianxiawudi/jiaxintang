/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./../context"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateChatInput: { // input type
    content?: string | null; // String
    roomId: number; // Int!
  }
  CreateChatInputPrivate: { // input type
    content?: string | null; // String
    roomId: number; // Int!
    touserId?: number | null; // Int
  }
  RoomCreateInput: { // input type
    details?: string | null; // String
    name: string; // String!
    ownerId?: number | null; // Int
    public: boolean; // Boolean!
  }
  UserUniqueInput: { // input type
    email?: string | null; // String
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
  SortOrder: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Chat: { // root type
    content?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    viewed: boolean; // Boolean!
  }
  Mutation: {};
  Query: {};
  Room: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currentNumberofUsers: number; // Int!
    details?: string | null; // String
    id: number; // Int!
    name: string; // String!
    public: boolean; // Boolean!
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    isOnline: boolean; // Boolean!
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Chat: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    content: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    room: NexusGenRootTypes['Room'] | null; // Room
    touser: NexusGenRootTypes['User'] | null; // User
    viewed: boolean; // Boolean!
  }
  Mutation: { // field return type
    createChat: NexusGenRootTypes['Chat'] | null; // Chat
    createChatPrivate: NexusGenRootTypes['Chat'] | null; // Chat
    createRoom: NexusGenRootTypes['Room'] | null; // Room
    decrementRoomUser: NexusGenRootTypes['Room'] | null; // Room
    deleteRoom: NexusGenRootTypes['Room'] | null; // Room
    incrementRoomUser: NexusGenRootTypes['Room'] | null; // Room
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    signup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
  }
  Query: { // field return type
    allRooms: NexusGenRootTypes['Room'][]; // [Room!]!
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    chatByRoomId: NexusGenRootTypes['Chat'][]; // [Chat!]!
    chatByRoomIdandUser: NexusGenRootTypes['Chat'][]; // [Chat!]!
    chatPrivate: NexusGenRootTypes['Chat'][]; // [Chat!]!
    me: NexusGenRootTypes['User'] | null; // User
    roomById: NexusGenRootTypes['Room'] | null; // Room
    userPrivateRoom: NexusGenRootTypes['Room'] | null; // Room
  }
  Room: { // field return type
    chats: NexusGenRootTypes['Chat'][]; // [Chat!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currentNumberofUsers: number; // Int!
    details: string | null; // String
    id: number; // Int!
    name: string; // String!
    owner: NexusGenRootTypes['User'] | null; // User
    public: boolean; // Boolean!
  }
  User: { // field return type
    chats: NexusGenRootTypes['Chat'][]; // [Chat!]!
    email: string; // String!
    getchated: NexusGenRootTypes['Chat'][]; // [Chat!]!
    id: number; // Int!
    isOnline: boolean; // Boolean!
    name: string | null; // String
    rooms: NexusGenRootTypes['Room'][]; // [Room!]!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Chat: { // field return type name
    author: 'User'
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    room: 'Room'
    touser: 'User'
    viewed: 'Boolean'
  }
  Mutation: { // field return type name
    createChat: 'Chat'
    createChatPrivate: 'Chat'
    createRoom: 'Room'
    decrementRoomUser: 'Room'
    deleteRoom: 'Room'
    incrementRoomUser: 'Room'
    login: 'AuthPayload'
    signup: 'AuthPayload'
  }
  Query: { // field return type name
    allRooms: 'Room'
    allUsers: 'User'
    chatByRoomId: 'Chat'
    chatByRoomIdandUser: 'Chat'
    chatPrivate: 'Chat'
    me: 'User'
    roomById: 'Room'
    userPrivateRoom: 'Room'
  }
  Room: { // field return type name
    chats: 'Chat'
    createdAt: 'DateTime'
    currentNumberofUsers: 'Int'
    details: 'String'
    id: 'Int'
    name: 'String'
    owner: 'User'
    public: 'Boolean'
  }
  User: { // field return type name
    chats: 'Chat'
    email: 'String'
    getchated: 'Chat'
    id: 'Int'
    isOnline: 'Boolean'
    name: 'String'
    rooms: 'Room'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createChat: { // args
      data: NexusGenInputs['CreateChatInput']; // CreateChatInput!
    }
    createChatPrivate: { // args
      data: NexusGenInputs['CreateChatInputPrivate']; // CreateChatInputPrivate!
    }
    createRoom: { // args
      data: NexusGenInputs['RoomCreateInput']; // RoomCreateInput!
    }
    decrementRoomUser: { // args
      id: number; // Int!
    }
    deleteRoom: { // args
      id: number; // Int!
    }
    incrementRoomUser: { // args
      id: number; // Int!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      name?: string | null; // String
      password: string; // String!
    }
  }
  Query: {
    chatByRoomId: { // args
      id?: number | null; // Int
    }
    chatByRoomIdandUser: { // args
      id?: number | null; // Int
      userid?: number | null; // Int
    }
    chatPrivate: { // args
      id?: number | null; // Int
      userid?: number | null; // Int
    }
    roomById: { // args
      id?: number | null; // Int
    }
    userPrivateRoom: { // args
      id?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}