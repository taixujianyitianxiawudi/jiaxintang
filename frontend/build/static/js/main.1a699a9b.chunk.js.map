{"version":3,"sources":["cache.ts","components/loading.tsx","pages/signup.tsx","pages/login.tsx","components/logout.tsx","components/errors.tsx","pages/profile.tsx","components/chatutils/chatuploadimage.tsx","components/chatutils/cropper.tsx","components/chatutils/recordvoice.tsx","components/chatutils/selectpicutres.tsx","components/chatutils/chatutils.tsx","components/createchat.tsx","components/avatar.tsx","components/privatechathistory.tsx","components/publicchathistory.tsx","components/chathistory.tsx","pages/chatroom.tsx","components/deleteroom.tsx","components/roomlist.tsx","components/privateroom.tsx","components/userlist.tsx","components/createroom.tsx","pages/routes.tsx","pages/main.tsx","localauth.tsx","index.tsx"],"names":["cache","InMemoryCache","typePolicies","Query","fields","isLoggedIn","read","isLoggedInVar","UserOrRoom","UserOrRoomVar","makeVar","localStorage","getItem","Loading","SIGN_UP","gql","Signup","useMutation","onCompleted","signup","user","setItem","token","id","loading","error","useState","name","setName","email","setEmail","password","setPassword","className","src","alt","action","method","type","defaultValue","htmlFor","autoComplete","required","placeholder","onChange","e","target","value","to","onClick","variables","catch","LOGIN_USER","Login","login","path","exact","Logout","client","useApolloClient","evict","fieldName","gc","removeItem","window","location","href","Errors","MY_PROFILE","Profile","useQuery","data","undefined","me","ChatUploadImage","chatRef","setChat","Cropper","RecordVoice","SelectPictures","ChatUtils","CREATE_CHAT","JOIN_ROOM","LEFT_ROOM","CreateChat","roomId","userId","chat","useRef","createChat","leftRoom","joinRoom","oldRoomId","parseInt","incrementRoomUserId","createChatPrivateData","content","decrementRoomUserId","onKeyDown","key","shiftKey","current","preventDefault","touserId","ref","Avatar","createdAt","image","color","CHAT_PRIVATE","PrivateChatHistory","myuserId","pollInterval","chatPrivate","map","author","CHAT_BY_ROOM_ID","PublicChatHistory","chatByRoomIdId","chatByRoomId","ChatHistory","ChatRoom","_userId","useParams","DELETE_ROOM","DeleteRoom","deleteRoom","deleteRoomId","then","ROOM_LIST","RoomList","allRooms","room","details","currentNumberofUsers","owner","USER_PRIVATE_ROOM","PrivateRoom","userPrivateRoomId","userPrivateRoom","USER_LIST","UserList","allUsers","i","isOnline","CREATE_ROOM","CreateRoom","createRoom","setDetails","nameRef","detailsRef","createRoomData","public","USER_OR_ROOM","Routes","Main","typeDefs","IS_LOGGED_IN","IsLoggedIn","httpLink","HttpLink","uri","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","splitLink","split","query","definition","getMainDefinition","kind","operation","ApolloClient","link","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.1a699a9b.chunk.js","sourcesContent":["import { InMemoryCache, makeVar } from \"@apollo/client\";\r\n\r\nexport const cache: InMemoryCache = new InMemoryCache({\r\n  typePolicies: {\r\n    Query: {\r\n      fields: {\r\n        isLoggedIn: {\r\n          read() {\r\n            return isLoggedInVar();\r\n          },\r\n        },\r\n        UserOrRoom: {\r\n          read() {\r\n            return UserOrRoomVar()\r\n          }\r\n        }\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport const isLoggedInVar = makeVar<boolean>(!!localStorage.getItem(\"token\"));\r\nexport const UserOrRoomVar = makeVar<boolean>(localStorage.getItem(\"place\")===\"true\");\r\n","const Loading: React.FC = () => {\r\n  return (\r\n    <div>Loading, please wait</div>\r\n  );\r\n};\r\n\r\nexport default Loading;","import { gql, useMutation } from \"@apollo/client\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { isLoggedInVar } from \"../cache\";\r\nimport Loading from \"../components/loading\";\r\nimport * as SignUpTypes from \"./__generated__/SignUp\"\r\nexport const SIGN_UP = gql`\r\n  mutation SignUp($name: String $email: String! $password: String!) {\r\n    signup(name: $name email: $email password:$password) {\r\n      user {\r\n        id\r\n        email\r\n        name\r\n      }\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Signup: React.FC = () => {\r\n  const [signup, { loading, error }] = useMutation<\r\n  SignUpTypes.SignUp,\r\n  SignUpTypes.SignUpVariables\r\n  >(SIGN_UP,{\r\n    onCompleted({ signup }) {\r\n      if (signup && signup.user) {\r\n        localStorage.setItem('token', signup.token as string);\r\n        localStorage.setItem('userId', signup.user.id as unknown as string);\r\n        isLoggedInVar(true);\r\n      }\r\n    }\r\n  });\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  if (loading) return (\r\n    <Loading />\r\n  );\r\n  if (error) return (\r\n    <div>asdfsadf</div>\r\n  );\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n    <div className=\"max-w-md w-full space-y-8\">\r\n      <div>\r\n        <img\r\n          className=\"mx-auto h-12 w-auto\"\r\n          src=\"https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg\"\r\n          alt=\"Workflow\"\r\n        />\r\n        <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Sign in to your account</h2>\r\n      </div>\r\n      <form className=\"mt-8 space-y-6\" action=\"#\" method=\"POST\">\r\n        <input type=\"hidden\" name=\"remember\" defaultValue=\"true\" />\r\n        <div className=\"rounded-md shadow-sm -space-y-px\">\r\n          <div>\r\n            <label htmlFor=\"name\" className=\"sr-only\">\r\n              Your name\r\n            </label>\r\n            <input\r\n              id=\"name\"\r\n              name=\"name\"\r\n              type=\"name\"\r\n              autoComplete=\"name\"\r\n              required\r\n              className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n              placeholder=\"name\"\r\n              onChange={e=>setName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"email-address\" className=\"sr-only\">\r\n              Email address\r\n            </label>\r\n            <input\r\n              id=\"email-address\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              autoComplete=\"email\"\r\n              required\r\n              className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n              placeholder=\"Email address\"\r\n              onChange={e=>setEmail(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password\" className=\"sr-only\">\r\n              Password\r\n            </label>\r\n            <input\r\n              id=\"password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n              required\r\n              className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n              placeholder=\"Password\"\r\n              onChange={e=>setPassword(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center\">\r\n            <input\r\n              id=\"remember_me\"\r\n              name=\"remember_me\"\r\n              type=\"checkbox\"\r\n              className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\r\n            />\r\n            <label htmlFor=\"remember_me\" className=\"ml-2 block text-sm text-gray-900\">\r\n              Remember me\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"text-sm\">\r\n            <Link to=\"/\" className=\"font-medium text-indigo-600 hover:text-indigo-500\">\r\n             Click here to login\r\n            </Link>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n            onClick={()=>signup({variables: {name, email, password}})\r\n            .catch(e=>{return(\"fuck\")})\r\n          }>\r\n            Sign in\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\nexport default Signup;","import { gql, useMutation } from \"@apollo/client\";\r\nimport { useState } from \"react\";\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\r\nimport { isLoggedInVar } from \"../cache\";\r\nimport Loading from \"../components/loading\";\r\nimport Signup from \"./signup\";\r\nimport * as LoginTypes from './__generated__/Login'\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation Login($email: String! $password: String!) {\r\n    login(email: $email password:$password) {\r\n      user {\r\n        id\r\n      }\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Login: React.FC = () => {\r\n  const [login, { loading, error }] = useMutation<\r\n  LoginTypes.Login,\r\n  LoginTypes.LoginVariables\r\n  >(LOGIN_USER, {\r\n    onCompleted({ login }) {\r\n      if (login && login.user) {\r\n        localStorage.setItem('token', login.token as string);\r\n        localStorage.setItem('userId', login.user.id as unknown as string);\r\n        isLoggedInVar(true);\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  if (loading) return (\r\n    <Loading />\r\n  );\r\n  if (error) return (\r\n    <div>asdfsadf</div>\r\n  );\r\n\r\n  return (\r\n    <BrowserRouter>\r\n\r\n     <Switch>\r\n      <Route path=\"/signup\">\r\n        <Signup />\r\n      </Route>\r\n      <Route exact path=\"/\">\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-md w-full space-y-8\">\r\n        <div>\r\n          <img\r\n            className=\"mx-auto h-12 w-auto\"\r\n            src=\"https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg\"\r\n            alt=\"Workflow\"\r\n          />\r\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Sign in to your account</h2>\r\n        </div>\r\n        <form className=\"mt-8 space-y-6\" action=\"#\" method=\"POST\">\r\n          <input type=\"hidden\" name=\"remember\" defaultValue=\"true\" />\r\n          <div className=\"rounded-md shadow-sm -space-y-px\">\r\n            <div>\r\n              <label htmlFor=\"email-address\" className=\"sr-only\">\r\n                Email address\r\n              </label>\r\n              <input\r\n                id=\"email-address\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                required\r\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n                placeholder=\"Email address\"\r\n                onChange={e=>setEmail(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"password\" className=\"sr-only\">\r\n                Password\r\n              </label>\r\n              <input\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                autoComplete=\"current-password\"\r\n                required\r\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n                placeholder=\"Password\"\r\n                onChange={e=>setPassword(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center\">\r\n              <input\r\n                id=\"remember_me\"\r\n                name=\"remember_me\"\r\n                type=\"checkbox\"\r\n                className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\r\n              />\r\n              <label htmlFor=\"remember_me\" className=\"ml-2 block text-sm text-gray-900\">\r\n                Remember me\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"text-sm\">\r\n              <Link to=\"/signup\" className=\"font-medium text-indigo-600 hover:text-indigo-500\">\r\n               Click here to signup\r\n              </Link>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n              onClick={()=>login({variables: {email, password}})\r\n              .catch(e=>{return(\"fuck\")})\r\n            }>\r\n              Sign in\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n      </Route>\r\n     </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\nexport default Login;","import { useApolloClient } from '@apollo/client';\r\nimport { isLoggedInVar } from '../cache';\r\n\r\nconst Logout = () => {\r\n  const client = useApolloClient();\r\n  return (\r\n    <button \r\n    className=\"block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-pink-400\"\r\n    onClick={() => {\r\n      client.cache.evict({ fieldName: 'me' });\r\n      client.cache.gc();\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('userId');\r\n      isLoggedInVar(false);\r\n      window.location.href=\"/\"\r\n    }}>\r\n      log out!\r\n    </button>\r\n  )\r\n}\r\nexport default Logout;","const Errors: React.FC = () => {\r\n  return (\r\n    <div>Something went wrong!</div>\r\n  );\r\n};\r\n\r\nexport default Errors;","import { gql, useQuery } from \"@apollo/client\"\r\nimport Logout from \"../components/logout\"\r\nimport Loading from \"../components/loading\"\r\nimport Error from \"../components/errors\"\r\nimport * as MyProfileTypes from \"./__generated__/MyProfile\"\r\nexport const MY_PROFILE = gql`\r\n  query MyProfile {\r\n    me {\r\n      id\r\n      name\r\n      email\r\n    }\r\n  }\r\n`\r\nconst Profile: React.FC = () => {\r\n  const { data, loading, error } = useQuery<MyProfileTypes.MyProfile>(MY_PROFILE);\r\n  if (loading) return <Loading />\r\n  if (error || data === undefined) return <Error />\r\n  if (data.me) {\r\n    return (\r\n      <div className=\"bg-white shadow overflow-hidden sm:rounded-lg\">\r\n      <div className=\"px-4 py-5 sm:px-6\">\r\n        <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Profiles</h3>\r\n        <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">Personal details and application.</p>\r\n      </div>\r\n      <div className=\"border-t border-gray-200\">\r\n        <dl>\r\n          <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\r\n            <dt className=\"text-sm font-medium text-gray-500\">Id</dt>\r\n            <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{data.me.id}</dd>\r\n          </div>\r\n          <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\r\n            <dt className=\"text-sm font-medium text-gray-500\">Full name</dt>\r\n            <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{data.me.name}</dd>\r\n          </div>\r\n          <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\r\n            <dt className=\"text-sm font-medium text-gray-500\">Email address</dt>\r\n            <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{data.me.email}</dd>\r\n          </div>\r\n          <div className=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\r\n            <dt className=\"text-sm font-medium text-gray-500\">Salary expectation</dt>\r\n            <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">$120,000</dd>\r\n          </div>\r\n          <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\r\n            <dt className=\"text-sm font-medium text-gray-500\">About</dt>\r\n            <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\r\n              Fugiat ipsum ipsum deserunt culpa aute sint do nostrud anim incididunt cillum culpa consequat. Excepteur\r\n              qui ipsum aliquip consequat sint. Sit id mollit nulla mollit nostrud in ea officia proident. Irure nostrud\r\n              pariatur mollit ad adipisicing reprehenderit deserunt qui eu.\r\n            </dd>\r\n          </div>\r\n          <div className=\"bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\r\n            <dt className=\"text-sm font-medium text-gray-500\">Attachments</dt>\r\n            <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\r\n              <ul className=\"border border-gray-200 rounded-md divide-y divide-gray-200\">\r\n                <li className=\"pl-3 pr-4 py-3 flex items-center justify-between text-sm\">\r\n                  <div className=\"w-0 flex-1 flex items-center\">\r\n                    <span className=\"ml-2 flex-1 w-0 truncate\">resume_back_end_developer.pdf</span>\r\n                  </div>\r\n                  <div className=\"ml-4 flex-shrink-0\">\r\n                    <a href=\"#\" className=\"font-medium text-indigo-600 hover:text-indigo-500\">\r\n                      Download\r\n                    </a>\r\n                  </div>\r\n                </li>\r\n                <li className=\"pl-3 pr-4 py-3 flex items-center justify-between text-sm\">\r\n                  <div className=\"w-0 flex-1 flex items-center\">\r\n                    \r\n                    <span className=\"ml-2 flex-1 w-0 truncate\">coverletter_back_end_developer.pdf</span>\r\n                  </div>\r\n                  <div className=\"ml-4 flex-shrink-0\">\r\n                    <a href=\"#\" className=\"font-medium text-indigo-600 hover:text-indigo-500\">\r\n                      Download\r\n                    </a>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </dd>\r\n          </div>\r\n        </dl>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n  return <Error />;\r\n}\r\n  \r\nexport default Profile;","interface ChatInputProps {\r\n  chatRef: React.RefObject<HTMLInputElement>;\r\n  setChat: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst ChatUploadImage:React.FC<ChatInputProps> = ({chatRef, setChat}) => {\r\n    return (\r\n      <div>upload image</div>\r\n    ) \r\n  }\r\n  export default ChatUploadImage;","interface ChatInputProps {\r\n    chatRef: React.RefObject<HTMLInputElement>;\r\n    setChat: React.Dispatch<React.SetStateAction<string>>;\r\n  }\r\n\r\nconst Cropper:React.FC<ChatInputProps> = ({chatRef, setChat}) => {\r\n    return (\r\n      <div>Cropper</div>\r\n    ) \r\n  }\r\n  export default Cropper;","interface ChatInputProps {\r\n    chatRef: React.RefObject<HTMLInputElement>;\r\n    setChat: React.Dispatch<React.SetStateAction<string>>;\r\n  }\r\n\r\nconst RecordVoice:React.FC<ChatInputProps> = ({chatRef, setChat}) => {\r\n    return (\r\n      <div>RecordVoice</div>\r\n    ) \r\n  }\r\n  export default RecordVoice;","interface ChatInputProps {\r\n    chatRef: React.RefObject<HTMLInputElement>;\r\n    setChat: React.Dispatch<React.SetStateAction<string>>;\r\n  }\r\n\r\nconst SelectPictures:React.FC<ChatInputProps> = ({chatRef, setChat}) => {\r\n    return (\r\n      <div>select pictures</div>\r\n    ) \r\n  }\r\n  export default SelectPictures;","import ChatUploadImage from \"./chatuploadimage\"\r\nimport Cropper from \"./cropper\";\r\nimport RecordVoice from \"./recordvoice\";\r\nimport SelectPictures from \"./selectpicutres\";\r\n\r\n\r\ninterface ChatInputProps {\r\n  chatRef: React.RefObject<HTMLInputElement>;\r\n  setChat: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst ChatUtils:React.FC<ChatInputProps> = ({chatRef, setChat}) => {\r\n  return (\r\n    <div>\r\n    <ChatUploadImage chatRef={chatRef} setChat={setChat} />\r\n    <SelectPictures chatRef={chatRef} setChat={setChat} />\r\n    <Cropper chatRef={chatRef} setChat={setChat} />\r\n    <RecordVoice chatRef={chatRef} setChat={setChat} />\r\n    </div>\r\n  ) \r\n}\r\nexport default ChatUtils;","import { gql, useMutation } from \"@apollo/client\";\r\nimport { useRef, useState } from \"react\";\r\nimport ChatUtils from \"./chatutils/chatutils\";\r\nimport * as CreateChatTypes from \"./__generated__/CreateChat\";\r\nimport * as JoinRoombTypes from './__generated__/JoinRoomb'\r\nimport * as LeftRoombTypes from './__generated__/LeftRoomb'\r\nimport * as CreateChatPrivateTypes from './__generated__/CreateChatPrivateMutation'\r\nconst CREATE_CHAT = gql`\r\nmutation CreateChatPrivateMutation($createChatPrivateData: CreateChatInputPrivate!) {\r\n  createChatPrivate(data: $createChatPrivateData) {\r\n    id\r\n    content\r\n  }\r\n}\r\n`\r\ninterface InputMessageProps {\r\n  roomId: number;\r\n  userId?: number;\r\n}\r\n\r\nconst JOIN_ROOM = gql`\r\nmutation JoinRoomb($incrementRoomUserId: Int!) {\r\n  incrementRoomUser(id: $incrementRoomUserId) {\r\n    id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nconst LEFT_ROOM = gql`\r\nmutation LeftRoomb($decrementRoomUserId: Int!) {\r\n  decrementRoomUser(id: $decrementRoomUserId) {\r\n    id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nconst CreateChat: React.FC<InputMessageProps> = ({ roomId, userId}) => {\r\n\r\n  const [chat, setChat] = useState(\"\");\r\n  const chatRef = useRef<HTMLInputElement>(null);\r\n  const [createChat] =\r\n    useMutation<\r\n    CreateChatPrivateTypes.CreateChatPrivateMutation,\r\n    CreateChatPrivateTypes.CreateChatPrivateMutationVariables\r\n    >(CREATE_CHAT);\r\n\r\n    const [ leftRoom ] = useMutation<\r\n    LeftRoombTypes.LeftRoomb,\r\n    LeftRoombTypes.LeftRoombVariables\r\n    >(LEFT_ROOM);\r\n  \r\n    const [ joinRoom ] = useMutation<\r\n    JoinRoombTypes.JoinRoomb,\r\n    JoinRoombTypes.JoinRoombVariables\r\n    >(JOIN_ROOM);\r\n\r\n    let oldRoomId = parseInt(localStorage.getItem(\"roomId\") as string)\r\n    if (localStorage.getItem(\"roomId\") === null) {\r\n      joinRoom({variables:{incrementRoomUserId: roomId}})\r\n      localStorage.setItem(\"roomId\", roomId as unknown as string)\r\n      const newroomId = parseInt(localStorage.getItem(\"roomId\") as string,10)\r\n      createChat({\r\n        variables: {\r\n          createChatPrivateData: {\r\n            roomId: roomId,\r\n            content: \"enter the room\",\r\n          }\r\n        },\r\n      });\r\n    } else if (oldRoomId !== roomId) {\r\n      joinRoom({variables:{incrementRoomUserId: roomId}}).catch();\r\n      leftRoom({variables:{decrementRoomUserId: oldRoomId}}).catch();\r\n\r\n      if (userId === 999999) {\r\n        createChat({  \r\n          variables: {\r\n            createChatPrivateData: {\r\n              roomId: roomId,\r\n              content: \"enter the room\",\r\n            }\r\n          },\r\n        });\r\n      }\r\n      localStorage.setItem(\"roomId\", roomId as unknown as string);\r\n\r\n    }\r\n    if (userId === 999999) userId = undefined\r\n  return (\r\n    <div>\r\n      <ChatUtils chatRef={chatRef} setChat={setChat} />\r\n      <input\r\n        placeholder=\"type your message\"\r\n        onChange={(e) => setChat(e.target.value)}\r\n        onKeyDown={(e) => {\r\n          if (e.key === \"Enter\" && !e.shiftKey) {\r\n            if (chatRef.current !== null) {\r\n              e.preventDefault();\r\n              createChat({\r\n                variables: {\r\n                  createChatPrivateData: {\r\n                    roomId: roomId,\r\n                    content: chat,\r\n                    touserId: userId,\r\n                  }\r\n                },\r\n              }).catch((e) => {\r\n                return \"fuck\";\r\n              });\r\n              chatRef.current.value = \"\";\r\n              setChat(\"\");\r\n            }\r\n          }\r\n        }}\r\n        ref={chatRef}\r\n      />\r\n      <button\r\n        onClick={(e) => {\r\n          if (chatRef.current !== null) {\r\n            e.preventDefault()\r\n            createChat({\r\n              variables: {\r\n                createChatPrivateData: {\r\n                  roomId: roomId,\r\n                  content: chat,\r\n                  touserId: userId,\r\n                }\r\n              },\r\n            }).catch();\r\n            chatRef.current.value = \"\";\r\n            setChat(\"\");\r\n          }\r\n        }}\r\n      >\r\n        Enter\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateChat;\r\n","interface ChatVariables {\r\n  id: number,\r\n  name: string,\r\n  createdAt: string,\r\n  image?: string,\r\n  content?: string\r\n}\r\n\r\nconst Avatar: React.FC<ChatVariables> = ({ id, name, createdAt, image, content }) => {\r\n  const userId = localStorage.getItem(\"userId\");\r\n  let color = \"text-blue-400\";\r\n  if (id == userId as unknown as number) //if user created this message\r\n  { color = \"text-pink-400\"}\r\n  return (\r\n    <div className={color}>{name}: {content}</div>\r\n  );\r\n};\r\n\r\nexport default Avatar;\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport Avatar from \"./avatar\";\r\nimport Errors from \"./errors\";\r\nimport Loading from \"./loading\";\r\nimport * as ChatByRoomIdandUserIdTypes from \"./__generated__/ChatByRoomIdandUserId\";\r\nimport * as ChatPrivateTypes from \"./__generated__/chatPrivate\"\r\nconst CHAT_PRIVATE = gql`\r\nquery chatPrivate($chatPrivateId: Int, $chatPrivateUserid: Int) {\r\n  chatPrivate(id: $chatPrivateId, userid: $chatPrivateUserid) {\r\n    id\r\n    createdAt\r\n    content\r\n    author {\r\n      name\r\n      id\r\n    }\r\n    touser {\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\ninterface RoomProps {\r\n  roomId: number;\r\n  userId: number;\r\n}\r\n\r\nconst PrivateChatHistory: React.FC<RoomProps> = ({ roomId, userId }) => {\r\n  const myuserId = parseInt(localStorage.getItem(\"userId\") as string, 10)\r\n  const { data, loading, error } = useQuery<\r\n  ChatPrivateTypes.chatPrivate,\r\n  ChatPrivateTypes.chatPrivateVariables\r\n  >(CHAT_PRIVATE, {\r\n    variables: {\r\n      \"chatPrivateId\": myuserId,\r\n      \"chatPrivateUserid\": userId\r\n    },\r\n    pollInterval: 500,\r\n  });\r\n\r\n  if (loading) return <Loading />;\r\n  if (error || data === undefined) return <Errors />;\r\n  if (data) {\r\n    return (\r\n      <div>\r\n        {data &&\r\n          data.chatPrivate.map((chat) => (\r\n            <Avatar \r\n              id={chat.author?.id as number} \r\n              key={chat.id} \r\n              name={chat.author?.name as string} \r\n              createdAt={chat.createdAt} \r\n              content={chat.content as string}\r\n            />\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n  return <Errors />;\r\n};\r\nexport default PrivateChatHistory;\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport * as ChatByRoomIdTypes from \"./__generated__/ChatByRoomId\";\r\nimport Errors from \"./errors\";\r\nimport Loading from \"./loading\";\r\nimport Avatar from \"./avatar\";\r\n\r\nexport const CHAT_BY_ROOM_ID = gql`\r\n  query ChatByRoomId($chatByRoomIdId: Int) {\r\n    chatByRoomId(id: $chatByRoomIdId) {\r\n      id\r\n      createdAt\r\n      content\r\n      author {\r\n        name\r\n        id\r\n      }\r\n      room {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\ninterface RoomProps {\r\n  roomId: number;\r\n}\r\n\r\nconst PublicChatHistory: React.FC<RoomProps> = ({ roomId }) => {\r\n  const { data, loading, error } = useQuery<\r\n    ChatByRoomIdTypes.ChatByRoomId,\r\n    ChatByRoomIdTypes.ChatByRoomIdVariables\r\n  >(CHAT_BY_ROOM_ID, {\r\n    variables: { chatByRoomIdId: roomId },\r\n    pollInterval: 500,\r\n  });\r\n  \r\n  if (loading) return <Loading />;\r\n  if (error || data === undefined) return <Errors />;\r\n  if (data) {\r\n    return (\r\n      <div>\r\n        ChatHistory here ID:{roomId}\r\n        {data &&\r\n          data.chatByRoomId.map((chat) => (\r\n            <Avatar \r\n              id={chat.author?.id as number} \r\n              key={chat.id} \r\n              name={chat.author?.name as string} \r\n              createdAt={chat.createdAt} \r\n              content={chat.content as string}\r\n            />\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n  return <Errors />;\r\n};\r\nexport default PublicChatHistory;\r\n","import PrivateChatHistory from \"./privatechathistory\";\r\nimport PublicChatHistory from \"./publicchathistory\";\r\n\r\ninterface RoomProps {\r\n  roomId: number;\r\n  userId?: number;\r\n}\r\n\r\nconst ChatHistory: React.FC<RoomProps> = ({ roomId, userId }) => {\r\n  if (userId === 999999) {\r\n    return <PublicChatHistory roomId={roomId}/>\r\n  } else {\r\n    return (\r\n      <PrivateChatHistory roomId={roomId} userId={userId as number}/>\r\n    )\r\n  }\r\n};\r\n\r\nexport default ChatHistory;\r\n","import CreateChat from \"../components/createchat\"\r\nimport ChatHistory from \"../components/chathistory\"\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface UserIdProps {\r\n  _userId?: any;\r\n}\r\n\r\n//use route params for roomId.\r\nconst ChatRoom:React.FC<UserIdProps> = ({ _userId }) => {\r\n  const { roomId, userId } = useParams<{ roomId: string, userId: string }>()\r\n  return (\r\n    <div>\r\n      <ChatHistory roomId={parseInt(roomId,10)} userId={parseInt(userId,10)}/>\r\n      <CreateChat roomId={parseInt(roomId,10)} userId={parseInt(userId,10)}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;","import { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport * as DeleteRoomTypes from \"./__generated__/DeleteRoom\";\r\n\r\nconst DELETE_ROOM = gql`\r\n  mutation DeleteRoom($deleteRoomId: Int!) {\r\n    deleteRoom(id: $deleteRoomId) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\ninterface RoomProps {\r\n  roomId?: any;\r\n}\r\n\r\nconst DeleteRoom: React.FC<RoomProps> = ({ roomId }) => {\r\n  const [deleteRoom] =\r\n    useMutation<\r\n      DeleteRoomTypes.DeleteRoom,\r\n      DeleteRoomTypes.DeleteRoomVariables\r\n    >(DELETE_ROOM);\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        deleteRoom({ variables: { deleteRoomId: roomId } })\r\n        .then(()=>{\r\n          window.location.href=\"/chat\";\r\n          localStorage.removeItem(\"roomId\");\r\n        }); \r\n      }}\r\n    >\r\n      Delete room {roomId}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DeleteRoom;\r\n","import { gql ,useQuery } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DeleteRoom from \"./deleteroom\";\r\nimport Errors from \"./errors\";\r\nimport Loading from \"./loading\";\r\nimport * as RoomListTypes from \"./__generated__/RoomList\";\r\n\r\nconst ROOM_LIST = gql`\r\n  query RoomList {\r\n    allRooms {\r\n      currentNumberofUsers\r\n      name\r\n      details\r\n      owner {\r\n        name\r\n      }\r\n      createdAt\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst RoomList: React.FC = () => {\r\n  const { data, error, loading } = useQuery<RoomListTypes.RoomList>(ROOM_LIST, {\r\n    pollInterval: 1000,\r\n  });\r\n  if (loading) return <Loading />;\r\n  if (error || data === undefined) return <Errors />;\r\n  if (data) {\r\n    return (\r\n      <div className=\"flex-col\">\r\n        {data.allRooms.map((room) => (\r\n          <Link to={(\"/chat/public/\" + room.id + \"/999999\") as unknown as string}>\r\n            <div className=\"p-6 max-w-sm bg-white rounded-xl shadow-md flex items-center space-x-4\"\r\n            \r\n\r\n              >\r\n              <div className=\"text-gray-500\">{room.id}</div>\r\n              <div className=\"text-gray-500\">{room.name}</div>\r\n              <div className=\"text-gray-500\">{room.details}</div>\r\n              <div className=\"text-gray-500\">\r\n                this room now have{room.currentNumberofUsers} users\r\n              </div>\r\n              <div className=\"text-gray-500\">owner: {room.owner?.name}</div>\r\n              <DeleteRoom key={room.id} roomId={room.id} />\r\n            </div>\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  return <Errors />;\r\n};\r\nexport default RoomList;\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport * as UserPrivateRoomTypes from './__generated__/UserPrivateRoom'\r\nimport Errors from \"./errors\";\r\nimport { Link } from \"react-router-dom\";\r\ninterface UserIdProps {\r\n    userId?: any;\r\n  }\r\n\r\nconst USER_PRIVATE_ROOM = gql`\r\n  query UserPrivateRoom($userPrivateRoomId: Int) {\r\n  userPrivateRoom(id: $userPrivateRoomId) {\r\n    id\r\n  }\r\n}\r\n`\r\n\r\nconst PrivateRoom: React.FC<UserIdProps> = ({ userId }) => {\r\n  const {data} = useQuery<\r\n  UserPrivateRoomTypes.UserPrivateRoom,\r\n  UserPrivateRoomTypes.UserPrivateRoomVariables>(USER_PRIVATE_ROOM,{\r\n      variables: { userPrivateRoomId: userId }\r\n  });\r\n  if (data && data.userPrivateRoom) {\r\n    return (\r\n        <Link to={(\"/chat/private/\"+ data.userPrivateRoom.id +\"/\"+ userId ) as unknown as string}>\r\n          <div>\r\n            CHAT\r\n          </div>\r\n        </Link>\r\n      );\r\n  }\r\n  return <Errors />\r\n};\r\n\r\nexport default PrivateRoom;","import { gql, useQuery } from \"@apollo/client\";\r\nimport Loading from \"./loading\";\r\nimport Errors from \"./errors\";\r\nimport * as UserListTypes from \"./__generated__/UserList\";\r\nimport PrivateRoom from \"./privateroom\";\r\nconst USER_LIST = gql`\r\n  query UserList {\r\n    allUsers {\r\n      id\r\n      name\r\n      isOnline\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserList: React.FC = () => {\r\n  const { data, loading, error } = useQuery<UserListTypes.UserList>(USER_LIST);\r\n\r\n  if (loading) return <Loading />;\r\n  if (error || data === undefined) return <Errors />;\r\n  if (data) {\r\n    return (\r\n      <div className=\"flex-col\">\r\n        {data.allUsers.map((user, i) => (\r\n          <div key={i}className=\"p-6 max-w-sm bg-white rounded-xl shadow-md flex items-center space-x-4\">\r\n            <p className=\"text-gray-500\">{user.name}</p>\r\n            <p className=\"text-gray-500\">\r\n              {user.isOnline ? <p>online!</p> : <p>offline</p>}\r\n            </p>\r\n            <PrivateRoom key={user.id} userId={user.id}/>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  return <Errors />;\r\n};\r\n\r\nexport default UserList;\r\n","import { gql, useMutation } from \"@apollo/client\";\r\nimport { useRef, useState } from \"react\";\r\nimport * as CreateRoomTypes from \"./__generated__/CreateRoom\";\r\n\r\nconst CREATE_ROOM = gql`\r\n  mutation CreateRoom($createRoomData: RoomCreateInput!) {\r\n    createRoom(data: $createRoomData) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateRoom: React.FC = () => {\r\n  const [createRoom] =\r\n    useMutation<\r\n      CreateRoomTypes.CreateRoom,\r\n      CreateRoomTypes.CreateRoomVariables\r\n    >(CREATE_ROOM);\r\n  const [name, setName] = useState(\"\");\r\n  const [details, setDetails] = useState(\"\");\r\n  const nameRef = useRef<HTMLInputElement>(null);\r\n  const detailsRef = useRef<HTMLInputElement>(null);\r\n  return (\r\n    <div>\r\n      <p>Enter Room informations</p>\r\n      <input\r\n        placeholder=\"name\"\r\n        type=\"text\"\r\n        onChange={(e) => setName(e.target.value)}\r\n        ref={nameRef}\r\n      />\r\n      <input\r\n        placeholder=\"details\"\r\n        type=\"text\"\r\n        onChange={(e) => setDetails(e.target.value)}\r\n        ref={detailsRef}\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          if (nameRef.current !== null) {\r\n            createRoom({\r\n              variables: { createRoomData: { name, details, public: true }},\r\n            }).catch();\r\n            nameRef.current.value = \"\";\r\n            if (detailsRef.current !== null) {\r\n              detailsRef.current.value = \"\";\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        CreateRoom\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRoom;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport ChatRoom from \"./chatroom\";\r\nimport RoomList from \"../components/roomlist\";\r\nimport UserList from \"../components/userlist\";\r\nimport CreateRoom from \"../components/createroom\";\r\nimport { UserOrRoomVar } from \"../cache\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nconst USER_OR_ROOM = gql`\r\n  query UserOrRoom {\r\n    UserOrRoom @client\r\n  }\r\n`;\r\n\r\n\r\n\r\n\r\nconst Routes: React.FC = () => {\r\n  //const [UserorRoom, setUserorRoom] = useState(UserOrRoom);\r\n  const { data } = useQuery(USER_OR_ROOM);\r\n  return (\r\n    <BrowserRouter>\r\n      <div>\r\n        <div>\r\n          <Switch>\r\n            <Route path=\"/chat/public/:roomId/:userId\" exact>\r\n              <ChatRoom />\r\n            </Route>\r\n            <Route path=\"/chat/private/:roomId/:userId\" exact>\r\n              <ChatRoom />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n        <div>{data.UserOrRoom ? <UserList /> : <RoomList />}</div>\r\n        <button onClick={(e) => {\r\n          UserOrRoomVar(false);\r\n          localStorage.setItem(\"place\",\"false\")\r\n          }}>\r\n          click me to room list!\r\n        </button>\r\n        <button onClick={(e) => {\r\n          UserOrRoomVar(true);\r\n          localStorage.setItem(\"place\",\"true\")\r\n          }}>\r\n          click me to user list!\r\n        </button>\r\n        <div>\r\n          create new room here~\r\n          <CreateRoom />\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n};\r\nexport default Routes;\r\n","import { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\r\nimport Logout from \"../components/logout\";\r\nimport Profile from \"./profile\";\r\nimport Routes from \"./routes\";\r\n\r\nconst Main: React.FC = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <div>\r\n        <div className=\"nav-bar flex\">\r\n          <div className=\"nav-item\">\r\n            <Link to=\"/\">main</Link>\r\n          </div>\r\n          <div className=\"nav-item\">\r\n            <Link to=\"/profile\">profile</Link>\r\n          </div>\r\n\r\n          <div className=\"nav-item\">\r\n            <Link to=\"/chat\">chat</Link>\r\n          </div>\r\n\r\n          <div className=\"nav-item\">\r\n            <Link to=\"/invitations\">invitations</Link>\r\n          </div>\r\n\r\n          <div className=\"nav-item\">\r\n            <Link to=\"/search\">search</Link>\r\n          </div>\r\n\r\n          <div className=\"nav-item\">\r\n            <Logout />\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <div>welcome page</div>\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n              <Profile />\r\n            </Route>\r\n            <Route path=\"/chat\">\r\n              <Routes />\r\n            </Route>\r\n            <Route path=\"/invitations\">\r\n              <div>invitations</div>\r\n            </Route>\r\n            <Route path=\"/search\">\r\n              <div>search</div>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { gql, useQuery } from '@apollo/client';\r\nimport Login from './pages/login';\r\nimport Main from './pages/main';\r\nexport const typeDefs = gql`\r\n  extend type Query {\r\n    isLoggedIn: Boolean!\r\n    UserOrRoom: Boolean!\r\n  }\r\n`;\r\n\r\nconst IS_LOGGED_IN = gql`\r\n  query IsUserLoggedIn {\r\n    isLoggedIn @client\r\n  }\r\n`;\r\n\r\nexport default function IsLoggedIn() {\r\n  const { data } = useQuery(IS_LOGGED_IN);\r\n  return data.isLoggedIn \r\n  ? <Main /> \r\n  : <div><Login /></div>;\r\n}\r\n\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport {\r\n  ApolloClient,\r\n  NormalizedCacheObject,\r\n  ApolloProvider,\r\n  split,\r\n  HttpLink,\r\n} from \"@apollo/client\";\r\nimport { cache } from \"./cache\";\r\nimport { typeDefs } from \"./localauth\";\r\nimport IsLoggedIn from \"./localauth\";\r\nimport { getMainDefinition } from \"@apollo/client/utilities\";\r\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: \"http://localhost:4000/graphql\",\r\n  headers: {\r\n    authorization: localStorage.getItem(\"token\") || \"\",\r\n    \"client-name\": \"Space Explorer [web]\",\r\n    \"client-version\": \"1.0.0\",\r\n  },\r\n});\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: \"ws://localhost:4000/subscriptions\",\r\n  options: {\r\n    reconnect: true,\r\n    connectionParams: { authorization: localStorage.getItem(\"token\") || \"\" },\r\n  },\r\n});\r\n\r\n// The split function takes three parameters:\r\n//\r\n// * A function that's called for each operation to execute\r\n// * The Link to use for an operation if the function returns a \"truthy\" value\r\n// * The Link to use for an operation if the function returns a \"falsy\" value\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === \"OperationDefinition\" &&\r\n      definition.operation === \"subscription\"\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink\r\n);\r\n\r\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\r\n  headers: {\r\n    authorization: localStorage.getItem(\"token\") || \"\",\r\n    \"client-name\": \"Space Explorer [web]\",\r\n    \"client-version\": \"1.0.0\",\r\n  },\r\n  cache,\r\n  uri: \"http://localhost:4000/graphql\",\r\n  typeDefs: typeDefs,\r\n  link: splitLink,\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <IsLoggedIn />\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}