{"version":3,"sources":["cache.ts","components/logout.tsx","components/loading.tsx","components/errors.tsx","pages/profile.tsx","pages/signup.tsx","components/createchat.tsx","components/privatechathistory.tsx","components/publicchathistory.tsx","components/chathistory.tsx","pages/chatroom.tsx","components/deleteroom.tsx","components/roomlist.tsx","components/privateroom.tsx","components/userlist.tsx","components/createroom.tsx","pages/routes.tsx","pages/login.tsx","localauth.tsx","index.tsx"],"names":["cache","InMemoryCache","typePolicies","Query","fields","isLoggedIn","read","isLoggedInVar","makeVar","localStorage","getItem","Logout","client","useApolloClient","onClick","evict","fieldName","gc","removeItem","Loading","Errors","MY_PROFILE","gql","Profile","useQuery","data","loading","error","undefined","me","className","id","name","email","SIGN_UP","Signup","useMutation","onCompleted","signup","user","setItem","token","useState","setName","setEmail","password","setPassword","placeholder","type","onChange","e","target","value","variables","catch","CREATE_CHAT","CreateChat","roomId","chat","setChat","textRef","useRef","createChat","onKeyDown","key","shiftKey","current","createChatData","content","ref","CHAT_BY_ROOM_ID_AND_USER_ID","PrivateChatHistory","userId","chatByRoomIdandUserId","chatByRoomIdandUserUserid","pollInterval","chatByRoomIdandUser","map","author","createdAt","CHAT_BY_ROOM_ID","PublicChatHistory","chatByRoomIdId","chatByRoomId","ChatHistory","ChatRoom","_userId","useParams","parseInt","DELETE_ROOM","DeleteRoom","deleteRoom","deleteRoomId","ROOM_LIST","RoomList","allRooms","room","to","details","currentNumberofUsers","owner","USER_PRIVATE_ROOM","PrivateRoom","userPrivateRoomId","userPrivateRoom","USER_LIST","UserList","allUsers","isOnline","CREATE_ROOM","CreateRoom","createRoom","setDetails","nameRef","detailsRef","createRoomData","public","Routes","exact","path","LOGIN_USER","Login","login","typeDefs","IS_LOGGED_IN","IsLoggedIn","httpLink","HttpLink","uri","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","splitLink","split","query","definition","getMainDefinition","kind","operation","ApolloClient","link","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"uNAEaA,EAAuB,IAAIC,IAAc,CACpDC,aAAc,CACZC,MAAO,CACLC,OAAQ,CACNC,WAAY,CACVC,KADU,WAER,OAAOC,WAQNA,EAAgBC,cAAmBC,aAAaC,QAAQ,U,wCCCtDC,EAdA,WACb,IAAMC,EAASC,cACf,OACE,wBAAQC,QAAS,WACfF,EAAOZ,MAAMe,MAAM,CAAEC,UAAW,OAChCJ,EAAOZ,MAAMiB,KACbR,aAAaS,WAAW,SACxBT,aAAaS,WAAW,UACxBX,GAAc,IALhB,uBCAWY,EANW,WACxB,OACE,wDCIWC,EANU,WACvB,OACE,yDCGSC,EAAaC,YAAH,0GA6BRC,EApBW,WACxB,MAAiCC,YAAmCH,GAA5DI,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MACvB,OAAID,EAAgB,cAAC,EAAD,IAChBC,QAAkBC,IAATH,EAA2B,cAAC,EAAD,IACpCA,EAAKI,GAEL,8BACE,sBAAKC,UAAU,iFAAf,UACE,mBAAGA,UAAU,gBAAb,SAA8BL,EAAKI,GAAGE,KACtC,mBAAGD,UAAU,gBAAb,SAA8BL,EAAKI,GAAGG,OACtC,mBAAGF,UAAU,gBAAb,SAA8BL,EAAKI,GAAGI,QACtC,mBAAGH,UAAU,gBAAb,wBACA,cAAC,EAAD,SAKD,cAAC,EAAD,K,wCC1BII,EAAUZ,YAAH,wPA8DLa,EAjDU,WACvB,MAAqCC,YAGnCF,EAAQ,CACRG,YADQ,YACiB,IAAXC,EAAU,EAAVA,OACRA,GAAUA,EAAOC,OACnB9B,aAAa+B,QAAQ,QAASF,EAAOG,OACrChC,aAAa+B,QAAQ,SAAUF,EAAOC,KAAKR,IAC3CxB,GAAc,OARpB,mBAAO+B,EAAP,YAAiBZ,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAY1B,EAAwBe,mBAAS,IAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA0BD,mBAAS,IAAnC,mBAAOT,EAAP,KAAcW,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEA,OAAIpB,EACF,cAAC,EAAD,IAEEC,EACF,2CAGA,gCACE,8EACA,uBACEoB,YAAY,OACZC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAEP,EAAQO,EAAEC,OAAOC,UAEhC,uBACEL,YAAY,QACZC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAEN,EAASM,EAAEC,OAAOC,UAEjC,uBACEL,YAAY,WACZC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAEJ,EAAYI,EAAEC,OAAOC,UAEpC,wBAAQtC,QAAS,kBAAIwB,EAAO,CAACe,UAAW,CAACrB,OAAMC,QAAOY,cACnDS,OAAM,SAAAJ,GAAI,MAAO,WADpB,wBCvDAK,EAAcjC,YAAH,sKA2DFkC,EA/CiC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjD,EAAwBf,mBAAS,IAAjC,mBAAOgB,EAAP,KAAaC,EAAb,KACMC,EAAUC,iBAA4B,MAC5C,EACEzB,YAGEmB,GAJGO,EAAP,oBAKA,OACE,gCACE,0BACEf,YAAY,oBACZE,SAAU,SAACC,GAAD,OAAOS,EAAQT,EAAEC,OAAOC,QAClCW,UAAW,SAACb,GACI,UAAVA,EAAEc,KAAoBd,EAAEe,UACF,OAApBL,EAAQM,UACVJ,EAAW,CACTT,UAAW,CACTc,eAAgB,CAAEV,OAAQA,EAAQW,QAASV,MAE5CJ,OAAM,SAACJ,GACR,MAAO,UAETU,EAAQM,QAAQd,MAAQ,KAI9BiB,IAAKT,IAEP,wBACE9C,QAAS,WACiB,OAApB8C,EAAQM,UACVJ,EAAW,CACTT,UAAW,CAAEc,eAAgB,CAAEV,OAAQA,EAAQW,QAASV,MACvDJ,OAAM,SAACJ,GACR,MAAO,UAETU,EAAQM,QAAQd,MAAQ,KAR9B,uBCxCAkB,EAA8BhD,YAAH,qVAwDlBiD,EAhCiC,SAAC,GAAwB,IAAtBd,EAAqB,EAArBA,OAAQe,EAAa,EAAbA,OACzD,EAAiChD,YAG/B8C,EAA6B,CAC7BjB,UAAW,CACToB,sBAAuBhB,EACvBiB,0BAA2BF,GAE7BG,aAAc,MARRlD,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAWvB,OAAID,EAAgB,cAAC,EAAD,IAChBC,QAAkBC,IAATH,EAA2B,cAAC,EAAD,IACpCA,EAEA,+DAC+BgC,EAC5BhC,GACCA,EAAKmD,oBAAoBC,KAAI,SAACnB,GAAD,aAC3B,gCACE,0CACGA,EAAKoB,cADR,aACG,EAAa9C,KADhB,IACuB0B,EAAKqB,aAE5B,8BAAMrB,EAAKU,YAJHV,EAAK3B,UAUlB,cAAC,EAAD,KCtDIiD,EAAkB1D,YAAH,mPAgDb2D,EA7BgC,SAAC,GAAgB,IAAdxB,EAAa,EAAbA,OAChD,EAAiCjC,YAG/BwD,EAAiB,CACjB3B,UAAW,CAAE6B,eAAgBzB,GAC7BkB,aAAc,MALRlD,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAQvB,OAAID,EAAgB,cAAC,EAAD,IAChBC,QAAkBC,IAATH,EAA2B,cAAC,EAAD,IACpCA,EAEA,uDACuBgC,EACpBhC,GACCA,EAAK0D,aAAaN,KAAI,SAACnB,GAAD,aACpB,gCACE,0CACGA,EAAKoB,cADR,aACG,EAAa9C,KADhB,IACuB0B,EAAKqB,aAE5B,8BAAMrB,EAAKU,YAJHV,EAAK3B,UAUlB,cAAC,EAAD,KC9BMqD,EAZ0B,SAAC,GAAwB,IAAtB3B,EAAqB,EAArBA,OAAQe,EAAa,EAAbA,OAClD,OAAe,SAAXA,EACK,cAAC,EAAD,CAAmBf,OAAQA,IAGhC,2CAAce,EAChB,cAAC,EAAD,CAAoBf,OAAQA,EAAQe,OAAQA,QCqCjCa,GA1CG/D,YAAH,yJASGA,YAAH,yJASwB,SAAC,GAAgB,EAAdgE,QAAe,IACvD,EAA2BC,cAAnB9B,EAAR,EAAQA,OAAQe,EAAhB,EAAgBA,OAchB,OACE,gCACE,cAAC,EAAD,CAAaf,OAAQ+B,SAAS/B,EAAO,IAAKe,OAAQgB,SAAShB,EAAO,MAClE,0DAA6Bf,KAC7B,cAAC,EAAD,CAAYA,OAAQ+B,SAAS/B,EAAO,WC3CpCgC,EAAcnE,YAAH,qIA6BFoE,GAjByB,SAAC,GAAgB,IAAdjC,EAAa,EAAbA,OACzC,EACErB,YAGEqD,GAJGE,EAAP,oBAKA,OACE,yBACE7E,QAAS,WACP6E,EAAW,CAAEtC,UAAW,CAAEuC,aAAcnC,MAF5C,yBAKeA,MCrBboC,GAAYvE,YAAH,oMA2CAwE,GA5BY,WACzB,MAAiCtE,YAAiCqE,GAAW,CAC3ElB,aAAc,MADRlD,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAGd,OAHA,EAAqBD,QAGD,cAAC,EAAD,IAChBC,QAAkBC,IAATH,EAA2B,cAAC,EAAD,IACpCA,EAEA,8BACGA,EAAKsE,SAASlB,KAAI,SAACmB,GAAD,aACjB,cAAC,IAAD,CAAMC,GAAK,gBAAkBD,EAAKjE,GAAK,UAAvC,SACE,sBAAKD,UAAU,yEAAf,UACE,qBAAKA,UAAU,gBAAf,SAAgCkE,EAAKjE,KACrC,qBAAKD,UAAU,gBAAf,SAAgCkE,EAAKhE,OACrC,qBAAKF,UAAU,gBAAf,SAAgCkE,EAAKE,UACrC,sBAAKpE,UAAU,gBAAf,+BACqBkE,EAAKG,qBAD1B,YAGA,sBAAKrE,UAAU,gBAAf,8BAAuCkE,EAAKI,aAA5C,aAAuC,EAAYpE,QACnD,cAAC,GAAD,CAA0ByB,OAAQuC,EAAKjE,IAAtBiE,EAAKjE,cAO3B,cAAC,EAAD,KCxCHsE,GAAoB/E,YAAH,6IA0BRgF,GAlB4B,SAAC,GAAgB,IAAd9B,EAAa,EAAbA,OACrC/C,EAAQD,YAEgC6E,GAAkB,CAC7DhD,UAAW,CAAEkD,kBAAmB/B,KAH7B/C,KAKP,OAAIA,GAAQA,EAAK+E,gBAEX,cAAC,IAAD,CAAMP,GAAK,iBAAkBxE,EAAK+E,gBAAgBzE,GAAI,IAAKyC,EAA3D,SACA,8BACA,0DAA6B/C,EAAK+E,gBAAgBzE,GAAlD,eAAkEyC,SAKjE,cAAC,EAAD,KC1BHiC,GAAYnF,YAAH,kHAkCAoF,GAxBY,WACzB,MAAiClF,YAAiCiF,IAA1DhF,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAEvB,OAAID,EAAgB,cAAC,EAAD,IAChBC,QAAkBC,IAATH,EAA2B,cAAC,EAAD,IACpCA,EAEA,8BACGA,EAAKkF,SAAS9B,KAAI,SAACtC,GAAD,OACjB,sBAAKT,UAAU,iFAAf,UACE,mBAAGA,UAAU,gBAAb,SAA8BS,EAAKP,OACnC,mBAAGF,UAAU,gBAAb,SACGS,EAAKqE,SAAW,wCAAiB,0CAEpC,gDAAmBrE,EAAKP,QACxB,cAAC,GAAD,CAA2BwC,OAAQjC,EAAKR,IAAtBQ,EAAKR,YAM1B,cAAC,EAAD,KChCH8E,GAAcvF,YAAH,uJAsDFwF,GA9Cc,WAC3B,MACE1E,YAGEyE,IAJGE,EAAP,oBAKA,EAAwBrE,mBAAS,IAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA8BD,mBAAS,IAAvC,mBAAOwD,EAAP,KAAgBc,EAAhB,KACMC,EAAUpD,iBAAyB,MACnCqD,EAAarD,iBAAyB,MAC5C,OACE,gCACE,wDACA,uBACEd,YAAY,OACZC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOP,EAAQO,EAAEC,OAAOC,QAClCiB,IAAK4C,IAEP,uBACElE,YAAY,UACZC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAO8D,EAAW9D,EAAEC,OAAOC,QACrCiB,IAAK6C,IAEP,wBACEpG,QAAS,WACiB,OAApBmG,EAAQ/C,UACV6C,EAAW,CACT1D,UAAW,CAAE8D,eAAgB,CAAEnF,OAAMkE,UAASkB,QAAO,MACpD9D,OAAM,SAACJ,GACR,MAAO,UAET+D,EAAQ/C,QAAQd,MAAQ,GACG,OAAvB8D,EAAWhD,UACbgD,EAAWhD,QAAQd,MAAQ,MAVnC,4BC2BSiE,GAvDU,WACvB,OACE,cAAC,IAAD,UACE,gCACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAMpB,GAAG,IAAT,uCAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,WAAT,uBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,UAAT,sBAEF,+BACE,sDAEE,cAAC,GAAD,OAEF,uDAEE,cAAC,GAAD,OAEF,wDAEE,cAAC,GAAD,eAMR,uBAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,MAGlB,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,+BAA+BD,OAAK,EAAhD,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOC,KAAK,gCAAgCD,OAAK,EAAjD,SACE,cAAC,EAAD,eClDCE,GAAalG,YAAH,+LAyDRmG,GA9CS,WACtB,MAAoCrF,YAGlCoF,GAAY,CACZnF,YADY,YACY,IAAVqF,EAAS,EAATA,MACRA,GAASA,EAAMnF,OACjB9B,aAAa+B,QAAQ,QAASkF,EAAMjF,OACpChC,aAAa+B,QAAQ,SAAUkF,EAAMnF,KAAKR,IAC1CxB,GAAc,OARpB,mBAAOmH,EAAP,YAAgBhG,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,MAczB,EAA0Be,mBAAS,IAAnC,mBAAOT,EAAP,KAAcW,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,OAAIpB,EACF,cAAC,EAAD,IAEEC,EACF,2CAIA,gCACE,8DACA,uBACEoB,YAAY,QACZC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAEN,EAASM,EAAEC,OAAOC,UAEjC,uBACEL,YAAY,WACZC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAEJ,EAAYI,EAAEC,OAAOC,UAEpC,wBAAQtC,QAAS,kBAAI4G,EAAM,CAACrE,UAAW,CAACpB,QAAOY,cAC5CS,OAAM,SAAAJ,GAAI,MAAO,WADpB,mBAKA,cAAC,EAAD,QCzDOyE,GAAWrG,YAAH,kFAMfsG,GAAetG,YAAH,mFAMH,SAASuG,KAEtB,OADiBrG,YAASoG,IAAlBnG,KACIpB,WACV,cAAC,GAAD,IACA,8BAAK,cAAC,GAAD,M,sBCJHyH,GAAW,IAAIC,IAAS,CAC5BC,IAAK,gCACLC,QAAS,CACPC,cAAezH,aAAaC,QAAQ,UAAY,GAChD,cAAe,uBACf,iBAAkB,WAIhByH,GAAS,IAAIC,KAAc,CAC/BJ,IAAK,oCACLK,QAAS,CACPC,WAAW,EACXC,iBAAkB,CAAEL,cAAezH,aAAaC,QAAQ,UAAY,OASlE8H,GAAYC,iBAChB,YAAgB,IAAbC,EAAY,EAAZA,MACKC,EAAaC,aAAkBF,GACrC,MACsB,wBAApBC,EAAWE,MACc,iBAAzBF,EAAWG,YAGfX,GACAL,IAGIlH,GAA8C,IAAImI,IAAa,CACnEd,QAAS,CACPC,cAAezH,aAAaC,QAAQ,UAAY,GAChD,cAAe,uBACf,iBAAkB,SAEpBV,QACAgI,IAAK,gCACLL,SAAUA,GACVqB,KAAMR,KAGRS,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBvI,OAAQA,GAAxB,SACE,cAACiH,GAAD,MAEFuB,SAASC,eAAe,U","file":"static/js/main.0fc91e30.chunk.js","sourcesContent":["import { InMemoryCache, makeVar } from \"@apollo/client\";\r\n\r\nexport const cache: InMemoryCache = new InMemoryCache({\r\n  typePolicies: {\r\n    Query: {\r\n      fields: {\r\n        isLoggedIn: {\r\n          read() {\r\n            return isLoggedInVar();\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport const isLoggedInVar = makeVar<boolean>(!!localStorage.getItem(\"token\"));\r\n","import { useApolloClient } from '@apollo/client';\r\nimport { isLoggedInVar } from '../cache';\r\n\r\nconst Logout = () => {\r\n  const client = useApolloClient();\r\n  return (\r\n    <button onClick={() => {\r\n      client.cache.evict({ fieldName: 'me' });\r\n      client.cache.gc();\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('userId');\r\n      isLoggedInVar(false);\r\n    }}>\r\n      log out!\r\n    </button>\r\n  )\r\n}\r\nexport default Logout;","const Loading: React.FC = () => {\r\n  return (\r\n    <div>Loading, please wait</div>\r\n  );\r\n};\r\n\r\nexport default Loading;","const Errors: React.FC = () => {\r\n  return (\r\n    <div>Something went wrong!</div>\r\n  );\r\n};\r\n\r\nexport default Errors;","import { gql, useQuery } from \"@apollo/client\"\r\nimport Logout from \"../components/logout\"\r\nimport Loading from \"../components/loading\"\r\nimport Error from \"../components/errors\"\r\nimport * as MyProfileTypes from \"./__generated__/MyProfile\"\r\nexport const MY_PROFILE = gql`\r\n  query MyProfile {\r\n    me {\r\n      id\r\n      name\r\n      email\r\n    }\r\n  }\r\n`\r\nconst Profile: React.FC = () => {\r\n  const { data, loading, error } = useQuery<MyProfileTypes.MyProfile>(MY_PROFILE);\r\n  if (loading) return <Loading />\r\n  if (error || data === undefined) return <Error />\r\n  if (data.me) {\r\n    return (\r\n      <div>\r\n        <div className=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4\">\r\n          <p className=\"text-gray-500\">{data.me.id}</p>\r\n          <p className=\"text-gray-500\">{data.me.name}</p>\r\n          <p className=\"text-gray-500\">{data.me.email}</p>\r\n          <p className=\"text-gray-500\">My Profile</p>\r\n          <Logout />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  return <Error />;\r\n}\r\n  \r\nexport default Profile;","import { gql, useMutation } from \"@apollo/client\";\r\nimport { useState } from \"react\";\r\nimport { isLoggedInVar } from \"../cache\";\r\nimport Loading from \"../components/loading\";\r\nimport * as SignUpTypes from \"./__generated__/SignUp\"\r\nexport const SIGN_UP = gql`\r\n  mutation SignUp($name: String $email: String! $password: String!) {\r\n    signup(name: $name email: $email password:$password) {\r\n      user {\r\n        id\r\n        email\r\n        name\r\n      }\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Signup: React.FC = () => {\r\n  const [signup, { loading, error }] = useMutation<\r\n  SignUpTypes.SignUp,\r\n  SignUpTypes.SignUpVariables\r\n  >(SIGN_UP,{\r\n    onCompleted({ signup }) {\r\n      if (signup && signup.user) {\r\n        localStorage.setItem('token', signup.token as string);\r\n        localStorage.setItem('userId', signup.user.id as unknown as string);\r\n        isLoggedInVar(true);\r\n      }\r\n    }\r\n  });\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  if (loading) return (\r\n    <Loading />\r\n  );\r\n  if (error) return (\r\n    <div>asdfsadf</div>\r\n  );\r\n  return (\r\n    <div>\r\n      <p>Enter your name, email and password to Signup</p>\r\n      <input \r\n        placeholder=\"name\"\r\n        type=\"text\"\r\n        onChange={e=>setName(e.target.value)}\r\n      />\r\n      <input \r\n        placeholder=\"email\"\r\n        type=\"text\"\r\n        onChange={e=>setEmail(e.target.value)}\r\n      />\r\n      <input \r\n        placeholder=\"password\"\r\n        type=\"text\"\r\n        onChange={e=>setPassword(e.target.value)}\r\n      />\r\n      <button onClick={()=>signup({variables: {name, email, password}})\r\n        .catch(e=>{return(\"fuck\")})\r\n      }>\r\n        Signup\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default Signup;","import { gql, useMutation } from \"@apollo/client\";\r\nimport { useRef, useState } from \"react\";\r\nimport * as CreateChatTypes from \"./__generated__/CreateChat\";\r\n\r\nconst CREATE_CHAT = gql`\r\n  mutation CreateChat($createChatData: CreateChatInput!) {\r\n    createChat(data: $createChatData) {\r\n      id\r\n      content\r\n    }\r\n  }\r\n`;\r\ninterface InputMessageProps {\r\n  roomId: number;\r\n}\r\n\r\nconst CreateChat: React.FC<InputMessageProps> = ({ roomId }) => {\r\n  const [chat, setChat] = useState(\"\");\r\n  const textRef = useRef<HTMLTextAreaElement>(null);\r\n  const [createChat] =\r\n    useMutation<\r\n      CreateChatTypes.CreateChat,\r\n      CreateChatTypes.CreateChatVariables\r\n    >(CREATE_CHAT);\r\n  return (\r\n    <div>\r\n      <textarea\r\n        placeholder=\"type your message\"\r\n        onChange={(e) => setChat(e.target.value)}\r\n        onKeyDown={(e) => {\r\n          if (e.key === \"Enter\" && !e.shiftKey) {\r\n            if (textRef.current !== null) {\r\n              createChat({\r\n                variables: {\r\n                  createChatData: { roomId: roomId, content: chat },\r\n                },\r\n              }).catch((e) => {\r\n                return \"fuck\";\r\n              });\r\n              textRef.current.value = \"\";\r\n            }\r\n          }\r\n        }}\r\n        ref={textRef}\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          if (textRef.current !== null) {\r\n            createChat({\r\n              variables: { createChatData: { roomId: roomId, content: chat } },\r\n            }).catch((e) => {\r\n              return \"fuck\";\r\n            });\r\n            textRef.current.value = \"\";\r\n          }\r\n        }}\r\n      >\r\n        Enter\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateChat;\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport Errors from \"./errors\";\r\nimport Loading from \"./loading\";\r\nimport * as ChatByRoomIdandUserIdTypes from \"./__generated__/ChatByRoomIdandUserId\";\r\n\r\nconst CHAT_BY_ROOM_ID_AND_USER_ID = gql`\r\n  query ChatByRoomIdandUserId(\r\n    $chatByRoomIdandUserId: Int\r\n    $chatByRoomIdandUserUserid: Int\r\n  ) {\r\n    chatByRoomIdandUser(\r\n      id: $chatByRoomIdandUserId\r\n      userid: $chatByRoomIdandUserUserid\r\n    ) {\r\n      id\r\n      createdAt\r\n      content\r\n      author {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface RoomProps {\r\n  roomId: number;\r\n  userId: number;\r\n}\r\n\r\nconst PrivateChatHistory: React.FC<RoomProps> = ({ roomId, userId }) => {\r\n  const { data, loading, error } = useQuery<\r\n    ChatByRoomIdandUserIdTypes.ChatByRoomIdandUserId,\r\n    ChatByRoomIdandUserIdTypes.ChatByRoomIdandUserIdVariables\r\n  >(CHAT_BY_ROOM_ID_AND_USER_ID, {\r\n    variables: {\r\n      chatByRoomIdandUserId: roomId,\r\n      chatByRoomIdandUserUserid: userId,\r\n    },\r\n    pollInterval: 500,\r\n  });\r\n\r\n  if (loading) return <Loading />;\r\n  if (error || data === undefined) return <Errors />;\r\n  if (data) {\r\n    return (\r\n      <div>\r\n        PRIVATE ChatHistory here ID:{roomId}\r\n        {data &&\r\n          data.chatByRoomIdandUser.map((chat) => (\r\n            <div key={chat.id}>\r\n              <div>\r\n                {chat.author?.name} {chat.createdAt}\r\n              </div>\r\n              <div>{chat.content}</div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n  return <Errors />;\r\n};\r\nexport default PrivateChatHistory;\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport * as ChatByRoomIdTypes from \"./__generated__/ChatByRoomId\";\r\nimport Errors from \"./errors\";\r\nimport Loading from \"./loading\";\r\n\r\nexport const CHAT_BY_ROOM_ID = gql`\r\n  query ChatByRoomId($chatByRoomIdId: Int) {\r\n    chatByRoomId(id: $chatByRoomIdId) {\r\n      id\r\n      createdAt\r\n      content\r\n      author {\r\n        name\r\n      }\r\n      room {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\ninterface RoomProps {\r\n  roomId: number;\r\n}\r\n\r\nconst PublicChatHistory: React.FC<RoomProps> = ({ roomId }) => {\r\n  const { data, loading, error } = useQuery<\r\n    ChatByRoomIdTypes.ChatByRoomId,\r\n    ChatByRoomIdTypes.ChatByRoomIdVariables\r\n  >(CHAT_BY_ROOM_ID, {\r\n    variables: { chatByRoomIdId: roomId },\r\n    pollInterval: 500,\r\n  });\r\n\r\n  if (loading) return <Loading />;\r\n  if (error || data === undefined) return <Errors />;\r\n  if (data) {\r\n    return (\r\n      <div>\r\n        ChatHistory here ID:{roomId}\r\n        {data &&\r\n          data.chatByRoomId.map((chat) => (\r\n            <div key={chat.id}>\r\n              <div>\r\n                {chat.author?.name} {chat.createdAt}\r\n              </div>\r\n              <div>{chat.content}</div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n  return <Errors />;\r\n};\r\nexport default PublicChatHistory;\r\n","import PrivateChatHistory from \"./privatechathistory\";\r\nimport PublicChatHistory from \"./publicchathistory\";\r\n\r\n\r\ninterface RoomProps {\r\n  roomId: number;\r\n  userId?: number;\r\n}\r\n\r\nconst ChatHistory: React.FC<RoomProps> = ({ roomId, userId }) => {\r\n  if (userId === 999999) {\r\n    return <PublicChatHistory roomId={roomId}/>\r\n  } else {\r\n    return (\r\n      <div>userID: {userId}\r\n    <PrivateChatHistory roomId={roomId} userId={userId as number}/>\r\n    </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default ChatHistory;\r\n","import CreateChat from \"../components/createchat\"\r\nimport ChatHistory from \"../components/chathistory\"\r\nimport { useParams } from \"react-router-dom\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport * as JoinRoomaTypes from './__generated__/JoinRooma'\r\nimport * as LeftRoomaTypes from './__generated__/LeftRooma'\r\ninterface UserIdProps {\r\n  _userId?: any;\r\n}\r\n\r\nconst JOIN_ROOM = gql`\r\nmutation JoinRooma($incrementRoomUserId: Int!) {\r\n  incrementRoomUser(id: $incrementRoomUserId) {\r\n    id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nconst LEFT_ROOM = gql`\r\nmutation LeftRooma($decrementRoomUserId: Int!) {\r\n  decrementRoomUser(id: $decrementRoomUserId) {\r\n    id\r\n    name\r\n  }\r\n}\r\n`;\r\n//use route params for roomId.\r\nconst ChatRoom:React.FC<UserIdProps> = ({ _userId }) => {\r\n  const { roomId, userId } = useParams<{ roomId: string, userId: string }>()\r\n  \r\n//  const [ leftRoom ] = useMutation<\r\n//  LeftRoomaTypes.LeftRooma,\r\n//  LeftRoomaTypes.LeftRoomaVariables\r\n//  >(LEFT_ROOM);\r\n\r\n//  const [ joinRoom ] = useMutation<\r\n//  JoinRoomaTypes.JoinRooma,\r\n//  JoinRoomaTypes.JoinRoomaVariables\r\n//  >(JOIN_ROOM);\r\n  \r\n//  joinRoom({variables:{incrementRoomUserId: parseInt(roomId,10)}})\r\n//  leftRoom({variables:{decrementRoomUserId: parseInt(roomId,10)}})\r\n  return (\r\n    <div>\r\n      <ChatHistory roomId={parseInt(roomId,10)} userId={parseInt(userId,10)}/>\r\n      <p>This is a chat room~ ID: {roomId}</p>\r\n      <CreateChat roomId={parseInt(roomId,10)}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;","import { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport * as DeleteRoomTypes from \"./__generated__/DeleteRoom\";\r\n\r\nconst DELETE_ROOM = gql`\r\n  mutation DeleteRoom($deleteRoomId: Int!) {\r\n    deleteRoom(id: $deleteRoomId) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\ninterface RoomProps {\r\n  roomId?: any;\r\n}\r\n\r\nconst DeleteRoom: React.FC<RoomProps> = ({ roomId }) => {\r\n  const [deleteRoom] =\r\n    useMutation<\r\n      DeleteRoomTypes.DeleteRoom,\r\n      DeleteRoomTypes.DeleteRoomVariables\r\n    >(DELETE_ROOM);\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        deleteRoom({ variables: { deleteRoomId: roomId } });\r\n      }}\r\n    >\r\n      Delete room {roomId}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DeleteRoom;\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DeleteRoom from \"./deleteroom\";\r\nimport Errors from \"./errors\";\r\nimport Loading from \"./loading\";\r\nimport * as RoomListTypes from \"./__generated__/RoomList\";\r\n\r\nconst ROOM_LIST = gql`\r\n  query RoomList {\r\n    allRooms {\r\n      currentNumberofUsers\r\n      name\r\n      details\r\n      owner {\r\n        name\r\n      }\r\n      createdAt\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst RoomList: React.FC = () => {\r\n  const { data, error, loading } = useQuery<RoomListTypes.RoomList>(ROOM_LIST, {\r\n    pollInterval: 2000,\r\n  });\r\n  if (loading) return <Loading />;\r\n  if (error || data === undefined) return <Errors />;\r\n  if (data) {\r\n    return (\r\n      <div>\r\n        {data.allRooms.map((room) => (\r\n          <Link to={(\"/chat/public/\" + room.id + \"/999999\") as unknown as string}>\r\n            <div className=\"p-6 max-w-sm bg-white rounded-xl shadow-md flex items-center space-x-4\">\r\n              <div className=\"text-gray-500\">{room.id}</div>\r\n              <div className=\"text-gray-500\">{room.name}</div>\r\n              <div className=\"text-gray-500\">{room.details}</div>\r\n              <div className=\"text-gray-500\">\r\n                this room now have{room.currentNumberofUsers} users\r\n              </div>\r\n              <div className=\"text-gray-500\">owner: {room.owner?.name}</div>\r\n              <DeleteRoom key={room.id} roomId={room.id} />\r\n            </div>\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  return <Errors />;\r\n};\r\nexport default RoomList;\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport * as UserPrivateRoomTypes from './__generated__/UserPrivateRoom'\r\nimport Errors from \"./errors\";\r\nimport { Link } from \"react-router-dom\";\r\ninterface UserIdProps {\r\n    userId?: any;\r\n  }\r\n\r\nconst USER_PRIVATE_ROOM = gql`\r\n  query UserPrivateRoom($userPrivateRoomId: Int) {\r\n  userPrivateRoom(id: $userPrivateRoomId) {\r\n    id\r\n  }\r\n}\r\n`\r\n\r\nconst PrivateRoom: React.FC<UserIdProps> = ({ userId }) => {\r\n  const {data} = useQuery<\r\n  UserPrivateRoomTypes.UserPrivateRoom,\r\n  UserPrivateRoomTypes.UserPrivateRoomVariables>(USER_PRIVATE_ROOM,{\r\n      variables: { userPrivateRoomId: userId }\r\n  });\r\n  if (data && data.userPrivateRoom) {\r\n    return (\r\n        <Link to={(\"/chat/private/\"+ data.userPrivateRoom.id +\"/\"+ userId ) as unknown as string}>\r\n        <div>\r\n        <p>This is a chat room~ ID: {data.userPrivateRoom.id} AND USERID:{userId}</p>\r\n        </div>\r\n        </Link>\r\n      );\r\n  }\r\n  return <Errors />\r\n};\r\n\r\nexport default PrivateRoom;","import { gql, useQuery } from \"@apollo/client\";\r\nimport Loading from \"./loading\";\r\nimport Errors from \"./errors\";\r\nimport * as UserListTypes from \"./__generated__/UserList\";\r\nimport PrivateRoom from \"./privateroom\";\r\nconst USER_LIST = gql`\r\n  query UserList {\r\n    allUsers {\r\n      id\r\n      name\r\n      isOnline\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserList: React.FC = () => {\r\n  const { data, loading, error } = useQuery<UserListTypes.UserList>(USER_LIST);\r\n\r\n  if (loading) return <Loading />;\r\n  if (error || data === undefined) return <Errors />;\r\n  if (data) {\r\n    return (\r\n      <div>\r\n        {data.allUsers.map((user) => (\r\n          <div className=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4\">\r\n            <p className=\"text-gray-500\">{user.name}</p>\r\n            <p className=\"text-gray-500\">\r\n              {user.isOnline ? <p>online!</p> : <p>offline</p>}\r\n            </p>\r\n            <button>Chat with {user.name}</button>\r\n            <PrivateRoom key={user.id} userId={user.id}/>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  return <Errors />;\r\n};\r\n\r\nexport default UserList;\r\n","import { gql, useMutation } from \"@apollo/client\";\r\nimport { useRef, useState } from \"react\";\r\nimport * as CreateRoomTypes from \"./__generated__/CreateRoom\";\r\n\r\nconst CREATE_ROOM = gql`\r\n  mutation CreateRoom($createRoomData: RoomCreateInput!) {\r\n    createRoom(data: $createRoomData) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateRoom: React.FC = () => {\r\n  const [createRoom] =\r\n    useMutation<\r\n      CreateRoomTypes.CreateRoom,\r\n      CreateRoomTypes.CreateRoomVariables\r\n    >(CREATE_ROOM);\r\n  const [name, setName] = useState(\"\");\r\n  const [details, setDetails] = useState(\"\");\r\n  const nameRef = useRef<HTMLInputElement>(null);\r\n  const detailsRef = useRef<HTMLInputElement>(null);\r\n  return (\r\n    <div>\r\n      <p>Enter Room informations</p>\r\n      <input\r\n        placeholder=\"name\"\r\n        type=\"text\"\r\n        onChange={(e) => setName(e.target.value)}\r\n        ref={nameRef}\r\n      />\r\n      <input\r\n        placeholder=\"details\"\r\n        type=\"text\"\r\n        onChange={(e) => setDetails(e.target.value)}\r\n        ref={detailsRef}\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          if (nameRef.current !== null) {\r\n            createRoom({\r\n              variables: { createRoomData: { name, details, public:true } },\r\n            }).catch((e) => {\r\n              return \"fuck\";\r\n            });\r\n            nameRef.current.value = \"\";\r\n            if (detailsRef.current !== null) {\r\n              detailsRef.current.value = \"\";\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        CreateRoom\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateRoom;\r\n","import Profile from \"./profile\";\r\nimport React from \"react\";\r\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\r\nimport Signup from \"./signup\";\r\nimport ChatRoom from \"./chatroom\";\r\nimport RoomList from \"../components/roomlist\";\r\nimport UserList from \"../components/userlist\";\r\nimport CreateRoom from \"../components/createroom\";\r\n\r\nconst Routes: React.FC = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Main     You logged in!</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/profile\">Profile</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/signup\">Signup</Link>\r\n            </li>\r\n            <li>\r\n              <div>\r\n                this is a userlist!\r\n                <UserList />\r\n              </div>\r\n              <div>\r\n                this is a room list!\r\n                <RoomList />\r\n              </div>\r\n              <div>\r\n                create new room here~\r\n                <CreateRoom />\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <hr />\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            \r\n          </Route>\r\n          <Route exact path=\"/profile\">\r\n            <Profile />\r\n          </Route>\r\n          <Route exact path=\"/signup\">\r\n            <Signup />\r\n          </Route>\r\n          <Route path=\"/chat/public/:roomId/:userId\" exact >\r\n            <ChatRoom />\r\n          </Route>\r\n          <Route path=\"/chat/private/:roomId/:userId\" exact >\r\n            <ChatRoom />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n};\r\nexport default Routes;\r\n","import { gql, useMutation } from \"@apollo/client\";\r\nimport { useState } from \"react\";\r\nimport { isLoggedInVar } from \"../cache\";\r\nimport Loading from \"../components/loading\";\r\nimport Signup from \"./signup\";\r\nimport * as LoginTypes from './__generated__/Login'\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation Login($email: String! $password: String!) {\r\n    login(email: $email password:$password) {\r\n      user {\r\n        id\r\n      }\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Login: React.FC = () => {\r\n  const [login, { loading, error }] = useMutation<\r\n  LoginTypes.Login,\r\n  LoginTypes.LoginVariables\r\n  >(LOGIN_USER, {\r\n    onCompleted({ login }) {\r\n      if (login && login.user) {\r\n        localStorage.setItem('token', login.token as string);\r\n        localStorage.setItem('userId', login.user.id as unknown as string);\r\n        isLoggedInVar(true);\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  if (loading) return (\r\n    <Loading />\r\n  );\r\n  if (error) return (\r\n    <div>asdfsadf</div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <p>Enter your email and password</p>\r\n      <input \r\n        placeholder=\"email\"\r\n        type=\"text\"\r\n        onChange={e=>setEmail(e.target.value)}\r\n      />\r\n      <input \r\n        placeholder=\"password\"\r\n        type=\"text\"\r\n        onChange={e=>setPassword(e.target.value)}\r\n      />\r\n      <button onClick={()=>login({variables: {email, password}})\r\n        .catch(e=>{return(\"fuck\")})\r\n      }>\r\n        Login\r\n      </button>\r\n      <Signup />\r\n    </div>\r\n  );\r\n};\r\nexport default Login;","import { gql, useQuery } from '@apollo/client';\r\nimport Routes from './pages/routes'\r\nimport Login from './pages/login';\r\nexport const typeDefs = gql`\r\n  extend type Query {\r\n    isLoggedIn: Boolean!\r\n  }\r\n`;\r\n\r\nconst IS_LOGGED_IN = gql`\r\n  query IsUserLoggedIn {\r\n    isLoggedIn @client\r\n  }\r\n`;\r\n\r\nexport default function IsLoggedIn() {\r\n  const { data } = useQuery(IS_LOGGED_IN);\r\n  return data.isLoggedIn \r\n  ? <Routes /> \r\n  : <div><Login /></div>;\r\n}","import ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport {\r\n  ApolloClient,\r\n  NormalizedCacheObject,\r\n  ApolloProvider,\r\n  split,\r\n  HttpLink,\r\n} from \"@apollo/client\";\r\nimport { cache } from \"./cache\";\r\nimport { typeDefs } from \"./localauth\";\r\nimport IsLoggedIn from \"./localauth\";\r\nimport { getMainDefinition } from \"@apollo/client/utilities\";\r\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: \"http://localhost:4000/graphql\",\r\n  headers: {\r\n    authorization: localStorage.getItem(\"token\") || \"\",\r\n    \"client-name\": \"Space Explorer [web]\",\r\n    \"client-version\": \"1.0.0\",\r\n  },\r\n});\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: \"ws://localhost:4000/subscriptions\",\r\n  options: {\r\n    reconnect: true,\r\n    connectionParams: { authorization: localStorage.getItem(\"token\") || \"\" },\r\n  },\r\n});\r\n\r\n// The split function takes three parameters:\r\n//\r\n// * A function that's called for each operation to execute\r\n// * The Link to use for an operation if the function returns a \"truthy\" value\r\n// * The Link to use for an operation if the function returns a \"falsy\" value\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === \"OperationDefinition\" &&\r\n      definition.operation === \"subscription\"\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink\r\n);\r\n\r\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\r\n  headers: {\r\n    authorization: localStorage.getItem(\"token\") || \"\",\r\n    \"client-name\": \"Space Explorer [web]\",\r\n    \"client-version\": \"1.0.0\",\r\n  },\r\n  cache,\r\n  uri: \"http://localhost:4000/graphql\",\r\n  typeDefs: typeDefs,\r\n  link: splitLink,\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <IsLoggedIn />\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}